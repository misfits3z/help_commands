python -m venv venv  # створюємо віртуальне середовище
source venv/bin/activate  # активуємо для Linux/macOS
pip install "..." встановлюємо залежності
pip freeze > requirements.txt  Створи файл requirements.txt
pip install -r requirements.txt Якщо потрібно встановити всі залежності на іншому комп’ютері
Dockerfile створюємо докер файл в корені проєкту

# Використовуємо Python 3.12
FROM python:3.12.1

# Встановлюємо змінну середовища для робочої директорії
ENV APP_HOME /app

# Встановлюємо робочу директорію
WORKDIR $APP_HOME

# Копіюємо всі файли у контейнер
COPY . $APP_HOME

# Встановлюємо залежності
RUN pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir -r requirements.txt

# Відкриваємо порт 3000
EXPOSE 3000

# Запускаємо застосунок
CMD ["python", "main.py"]


створюємо docker-compose.yml:
version: "3.8"

services:
  web:
    build: .
    container_name: HW-03
    ports:
      - "3000:3000"
    volumes:
      - ./storage:/app/storage  # Монтуємо папку storage для збереження даних
    restart: unless-stopped
У розділі services ви описуєте різні контейнери, які хочете запустити. У вашому випадку, є лише один сервіс під назвою web.
web:

Це ім'я вашого сервісу (контейнера), яке буде використовуватись в Docker Compose для посилань на нього.

    build: .: Ця директива вказує, що Docker має будувати образ для контейнера з поточної директорії (.). Docker шукає файл Dockerfile в поточній директорії, щоб створити образ.

    container_name: HW-03: Це задає ім'я контейнера, який буде створено при запуску. В даному випадку контейнер буде називатись HW-03.

    ports:: Це мапування портів між вашим хостом (машиною, на якій ви запускаєте Docker) і контейнером.
        "3000:3000" означає, що порт 3000 на вашому хості буде перенаправлений на порт 3000 всередині контейнера. Тобто, якщо ваш додаток всередині контейнера слухає на порту 3000, ви зможете доступитися до нього через порт 3000 на хості.

    volumes:: Це мапування директорій або файлів між хостом і контейнером.
        ./storage:/app/storage: Це означає, що директорія storage на вашому хості буде змонтована в контейнері в папку /app/storage. Це дозволяє зберігати дані з контейнера на хості, навіть якщо контейнер перезапускається

 
 
 
 ******************poetry***********************

1. Запусти команду для створення міграції:

alembic revision --autogenerate -m "change grade type to integer"

2. Перевір, чи виглядає міграція коректно, а потім застосуй її:

alembic upgrade head


Щоб створити новий проєкт в поточній директорії:

poetry init

Щоб активувати серидовище:

source $(poetry env info --path)/bin/activate

Додавання бібліотеки:

poetry add 'name'

Якщо у вас є файл pyproject.toml з переліком залежностей:

poetry install

Ця команда створить poetry.lock і завантажить всі необхідні пакети.

